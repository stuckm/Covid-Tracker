{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","total","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColor","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","center","casesType","zoom","TileLayer","url","map","country","Circle","countryInfo","lat","long","fillOpactiy","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.037e84f2.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    Card,CardContent,Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title,cases,active,total,isRed,...props}) {\r\n    return (\r\n     <Card\r\n     onClick={props.onClick}\r\n     className={`infoBox ${active && 'infoBox--selected' }  ${isRed && 'infoBox--red'}`}  >\r\n         <CardContent>\r\n             <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n             <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}\r\n             \r\n             >{cases}</h2>\r\n\r\n             <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                 {total} Total\r\n             </Typography>\r\n\r\n         </CardContent>\r\n\r\n     </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColor = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat  ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n//DRAW CIRCLES ON THE MAP WITH TOOLTIPS\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpactiy={0.4}\r\n      color={casesTypeColor[casesType].hex}\r\n      fillColor={casesTypeColor[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColor[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}/>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\"> Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info-recovered\"> Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n          <div className=\"info-deaths\"> Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react'\r\nimport './Map.css'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport {showDataOnMap} from \"./util\";\r\n\r\nfunction Map({countries, center,casesType, zoom}){\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap\r\n            center={center} zoom={zoom}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    \r\n                />\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}){\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type:\"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value,index,values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for(let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType, ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n     const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data,casesType);\r\n          setData(chartData);\r\n        });\r\n\r\n\r\n     } \r\n     fetchData();\r\n\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n    {data?.length > 0 && (\r\n\r\n<Line\r\noptions={options}\r\n  data={{\r\n    datasets: [\r\n      {\r\n        \r\n        backgroundColor: \"rgba(204,16,52,0.5)\",\r\n        borderColor: \"#CC1034\",\r\n        data: data,\r\n      },\r\n    ],\r\n  }}\r\n  \r\n/>\r\n    )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select,Card,CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\"\nimport {sortData} from \"./util\";\nimport {prettyPrintStat} from \"./util\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  //list of country names and codes\n  const [countries, setCountries] = useState([]);\n  //current selected country defaults to worldwide\n  const [country, setCountry] = useState(\"worldwide\");\n  //country data used in .app_stats. on intial mount this is worldwide data\n  const [countryInfo, setCountryInfo] = useState({});\n  //table data that is used in Table.js\n  const [tableData, setTableData] = useState([]);\n  //Center of map view\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  //map zoom level\n  const [mapZoom, setMapZoom] = useState(3);\n  //country data used to generate circles\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType,setCasesType] = useState(\"cases\");\n\n  //set worldwide data for inital mount\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n//get country names for drop down list and country data for table and map circles\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          //sort data based on cases using util.js\n          const sortedData = sortData(data);\n          //set the table data with the sorted data\n          setTableData(sortedData);\n          //set the map data using all country data to generate circles\n          setMapCountries(data);\n          //generated dropdown list of all countries\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  //when dropdown list is changed info in .app_stats is updated and map view is adjusted \n  const onCountryChange = async (e) => {\n    //grab the country from the value of the selected dropdown\n    const countryCode = e.target.value;\n    //if country code is worldwide show all data otherwise grab data using country code\n     const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      //change the value in the drop down\n      setCountry(countryCode);\n      //sets country info that is displayed in .app_stats\n      setCountryInfo(data);\n      //set map view to country info lat and long\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      //set map zoom to 3\n      setMapZoom(3);\n    })\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl>\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} onClick={(e) => setCasesType(\"cases\")} active={casesType === \"cases\"} isRed/>\n          <InfoBox title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} onClick={(e) => setCasesType(\"recovered\")} active={casesType === \"recovered\"}/>\n          <InfoBox title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} onClick={(e) => setCasesType(\"deaths\")} active={casesType === \"deaths\"} isRed/>\n        </div>\n        <Map \n        casesType={casesType}\n        countries ={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          <h2>Live Cases by Country</h2>\n          <Table countries={tableData} />\n          <h3 className=\"graph_title\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app_graph\" casesType={casesType}/>\n        </CardContent>\n\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}